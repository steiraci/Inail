/* 
 * @project.name@
 *
 * @project.description@
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Au.Client;
using IO.Swagger.Au.Model;

namespace IO.Swagger.Au.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuPfControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// estrai asl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>List&lt;Asl&gt;</returns>
        List<Asl> EstraiAslUsingGET1 (string uuid, string codiceAsl = null);

        /// <summary>
        /// estrai asl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>ApiResponse of List&lt;Asl&gt;</returns>
        ApiResponse<List<Asl>> EstraiAslUsingGET1WithHttpInfo (string uuid, string codiceAsl = null);
        /// <summary>
        /// estrai indirizzo by  tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>List&lt;Indirizzo&gt;</returns>
        List<Indirizzo> EstraiIndirizzoByTipoUsingGET1 (string uuid, string codiceTipoIndirizzo = null);

        /// <summary>
        /// estrai indirizzo by  tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>ApiResponse of List&lt;Indirizzo&gt;</returns>
        ApiResponse<List<Indirizzo>> EstraiIndirizzoByTipoUsingGET1WithHttpInfo (string uuid, string codiceTipoIndirizzo = null);
        /// <summary>
        /// estrai ruolo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>List&lt;Ruolo&gt;</returns>
        List<Ruolo> EstraiRuoloUsingGET1 (string uuid);

        /// <summary>
        /// estrai ruolo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>ApiResponse of List&lt;Ruolo&gt;</returns>
        ApiResponse<List<Ruolo>> EstraiRuoloUsingGET1WithHttpInfo (string uuid);
        /// <summary>
        /// estrai stato civile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>List&lt;StatoCivile&gt;</returns>
        List<StatoCivile> EstraiStatoCivileUsingGET1 (string uuid);

        /// <summary>
        /// estrai stato civile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>ApiResponse of List&lt;StatoCivile&gt;</returns>
        ApiResponse<List<StatoCivile>> EstraiStatoCivileUsingGET1WithHttpInfo (string uuid);
        /// <summary>
        /// estrai mail by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>List&lt;MailTipo&gt;</returns>
        List<MailTipo> EstraiTipoMailUsingGET1 (string uuid, string codiceTipoMail = null);

        /// <summary>
        /// estrai mail by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>ApiResponse of List&lt;MailTipo&gt;</returns>
        ApiResponse<List<MailTipo>> EstraiTipoMailUsingGET1WithHttpInfo (string uuid, string codiceTipoMail = null);
        /// <summary>
        /// estrai telefono by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>List&lt;TelefonoTipo&gt;</returns>
        List<TelefonoTipo> EstraiTipoTelefonoUsingGET1 (string uuid, string codiceTipoTelefono = null);

        /// <summary>
        /// estrai telefono by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>ApiResponse of List&lt;TelefonoTipo&gt;</returns>
        ApiResponse<List<TelefonoTipo>> EstraiTipoTelefonoUsingGET1WithHttpInfo (string uuid, string codiceTipoTelefono = null);
        /// <summary>
        /// Ricerca Persona Fisica
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>List&lt;PersonaFisica&gt;</returns>
        List<PersonaFisica> GetPersonaFisicaUsingPOST1 (PersonaFisicaDTO persona);

        /// <summary>
        /// Ricerca Persona Fisica
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>ApiResponse of List&lt;PersonaFisica&gt;</returns>
        ApiResponse<List<PersonaFisica>> GetPersonaFisicaUsingPOST1WithHttpInfo (PersonaFisicaDTO persona);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// estrai asl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>Task of List&lt;Asl&gt;</returns>
        System.Threading.Tasks.Task<List<Asl>> EstraiAslUsingGET1Async (string uuid, string codiceAsl = null);

        /// <summary>
        /// estrai asl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Asl&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Asl>>> EstraiAslUsingGET1AsyncWithHttpInfo (string uuid, string codiceAsl = null);
        /// <summary>
        /// estrai indirizzo by  tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>Task of List&lt;Indirizzo&gt;</returns>
        System.Threading.Tasks.Task<List<Indirizzo>> EstraiIndirizzoByTipoUsingGET1Async (string uuid, string codiceTipoIndirizzo = null);

        /// <summary>
        /// estrai indirizzo by  tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Indirizzo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Indirizzo>>> EstraiIndirizzoByTipoUsingGET1AsyncWithHttpInfo (string uuid, string codiceTipoIndirizzo = null);
        /// <summary>
        /// estrai ruolo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of List&lt;Ruolo&gt;</returns>
        System.Threading.Tasks.Task<List<Ruolo>> EstraiRuoloUsingGET1Async (string uuid);

        /// <summary>
        /// estrai ruolo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of ApiResponse (List&lt;Ruolo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ruolo>>> EstraiRuoloUsingGET1AsyncWithHttpInfo (string uuid);
        /// <summary>
        /// estrai stato civile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of List&lt;StatoCivile&gt;</returns>
        System.Threading.Tasks.Task<List<StatoCivile>> EstraiStatoCivileUsingGET1Async (string uuid);

        /// <summary>
        /// estrai stato civile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of ApiResponse (List&lt;StatoCivile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatoCivile>>> EstraiStatoCivileUsingGET1AsyncWithHttpInfo (string uuid);
        /// <summary>
        /// estrai mail by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>Task of List&lt;MailTipo&gt;</returns>
        System.Threading.Tasks.Task<List<MailTipo>> EstraiTipoMailUsingGET1Async (string uuid, string codiceTipoMail = null);

        /// <summary>
        /// estrai mail by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MailTipo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MailTipo>>> EstraiTipoMailUsingGET1AsyncWithHttpInfo (string uuid, string codiceTipoMail = null);
        /// <summary>
        /// estrai telefono by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>Task of List&lt;TelefonoTipo&gt;</returns>
        System.Threading.Tasks.Task<List<TelefonoTipo>> EstraiTipoTelefonoUsingGET1Async (string uuid, string codiceTipoTelefono = null);

        /// <summary>
        /// estrai telefono by tipo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TelefonoTipo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TelefonoTipo>>> EstraiTipoTelefonoUsingGET1AsyncWithHttpInfo (string uuid, string codiceTipoTelefono = null);
        /// <summary>
        /// Ricerca Persona Fisica
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>Task of List&lt;PersonaFisica&gt;</returns>
        System.Threading.Tasks.Task<List<PersonaFisica>> GetPersonaFisicaUsingPOST1Async (PersonaFisicaDTO persona);

        /// <summary>
        /// Ricerca Persona Fisica
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>Task of ApiResponse (List&lt;PersonaFisica&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PersonaFisica>>> GetPersonaFisicaUsingPOST1AsyncWithHttpInfo (PersonaFisicaDTO persona);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuPfControllerApi : IAuPfControllerApi
    {
        private IO.Swagger.Au.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuPfControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuPfControllerApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Au.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Au.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuPfControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuPfControllerApi(IO.Swagger.Au.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Au.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Au.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Au.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Au.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// estrai asl 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>List&lt;Asl&gt;</returns>
        public List<Asl> EstraiAslUsingGET1 (string uuid, string codiceAsl = null)
        {
             ApiResponse<List<Asl>> localVarResponse = EstraiAslUsingGET1WithHttpInfo(uuid, codiceAsl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// estrai asl 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>ApiResponse of List&lt;Asl&gt;</returns>
        public ApiResponse< List<Asl> > EstraiAslUsingGET1WithHttpInfo (string uuid, string codiceAsl = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiAslUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-asl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceAsl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceAsl", codiceAsl)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiAslUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asl>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Asl>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asl>)));
        }

        /// <summary>
        /// estrai asl 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>Task of List&lt;Asl&gt;</returns>
        public async System.Threading.Tasks.Task<List<Asl>> EstraiAslUsingGET1Async (string uuid, string codiceAsl = null)
        {
             ApiResponse<List<Asl>> localVarResponse = await EstraiAslUsingGET1AsyncWithHttpInfo(uuid, codiceAsl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// estrai asl 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceAsl">codiceAsl (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Asl&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Asl>>> EstraiAslUsingGET1AsyncWithHttpInfo (string uuid, string codiceAsl = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiAslUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-asl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceAsl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceAsl", codiceAsl)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiAslUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asl>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Asl>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asl>)));
        }

        /// <summary>
        /// estrai indirizzo by  tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>List&lt;Indirizzo&gt;</returns>
        public List<Indirizzo> EstraiIndirizzoByTipoUsingGET1 (string uuid, string codiceTipoIndirizzo = null)
        {
             ApiResponse<List<Indirizzo>> localVarResponse = EstraiIndirizzoByTipoUsingGET1WithHttpInfo(uuid, codiceTipoIndirizzo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// estrai indirizzo by  tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>ApiResponse of List&lt;Indirizzo&gt;</returns>
        public ApiResponse< List<Indirizzo> > EstraiIndirizzoByTipoUsingGET1WithHttpInfo (string uuid, string codiceTipoIndirizzo = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiIndirizzoByTipoUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-indirizzo-by-tipo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceTipoIndirizzo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceTipoIndirizzo", codiceTipoIndirizzo)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiIndirizzoByTipoUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Indirizzo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Indirizzo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Indirizzo>)));
        }

        /// <summary>
        /// estrai indirizzo by  tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>Task of List&lt;Indirizzo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Indirizzo>> EstraiIndirizzoByTipoUsingGET1Async (string uuid, string codiceTipoIndirizzo = null)
        {
             ApiResponse<List<Indirizzo>> localVarResponse = await EstraiIndirizzoByTipoUsingGET1AsyncWithHttpInfo(uuid, codiceTipoIndirizzo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// estrai indirizzo by  tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoIndirizzo">codiceTipoIndirizzo (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Indirizzo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Indirizzo>>> EstraiIndirizzoByTipoUsingGET1AsyncWithHttpInfo (string uuid, string codiceTipoIndirizzo = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiIndirizzoByTipoUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-indirizzo-by-tipo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceTipoIndirizzo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceTipoIndirizzo", codiceTipoIndirizzo)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiIndirizzoByTipoUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Indirizzo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Indirizzo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Indirizzo>)));
        }

        /// <summary>
        /// estrai ruolo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>List&lt;Ruolo&gt;</returns>
        public List<Ruolo> EstraiRuoloUsingGET1 (string uuid)
        {
             ApiResponse<List<Ruolo>> localVarResponse = EstraiRuoloUsingGET1WithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// estrai ruolo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>ApiResponse of List&lt;Ruolo&gt;</returns>
        public ApiResponse< List<Ruolo> > EstraiRuoloUsingGET1WithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiRuoloUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-ruoli-by-uuid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiRuoloUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ruolo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ruolo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ruolo>)));
        }

        /// <summary>
        /// estrai ruolo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of List&lt;Ruolo&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ruolo>> EstraiRuoloUsingGET1Async (string uuid)
        {
             ApiResponse<List<Ruolo>> localVarResponse = await EstraiRuoloUsingGET1AsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// estrai ruolo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of ApiResponse (List&lt;Ruolo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Ruolo>>> EstraiRuoloUsingGET1AsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiRuoloUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-ruoli-by-uuid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiRuoloUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ruolo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ruolo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ruolo>)));
        }

        /// <summary>
        /// estrai stato civile 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>List&lt;StatoCivile&gt;</returns>
        public List<StatoCivile> EstraiStatoCivileUsingGET1 (string uuid)
        {
             ApiResponse<List<StatoCivile>> localVarResponse = EstraiStatoCivileUsingGET1WithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// estrai stato civile 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>ApiResponse of List&lt;StatoCivile&gt;</returns>
        public ApiResponse< List<StatoCivile> > EstraiStatoCivileUsingGET1WithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiStatoCivileUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-stato-civile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiStatoCivileUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StatoCivile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StatoCivile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StatoCivile>)));
        }

        /// <summary>
        /// estrai stato civile 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of List&lt;StatoCivile&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatoCivile>> EstraiStatoCivileUsingGET1Async (string uuid)
        {
             ApiResponse<List<StatoCivile>> localVarResponse = await EstraiStatoCivileUsingGET1AsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// estrai stato civile 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <returns>Task of ApiResponse (List&lt;StatoCivile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StatoCivile>>> EstraiStatoCivileUsingGET1AsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiStatoCivileUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-stato-civile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiStatoCivileUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StatoCivile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StatoCivile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StatoCivile>)));
        }

        /// <summary>
        /// estrai mail by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>List&lt;MailTipo&gt;</returns>
        public List<MailTipo> EstraiTipoMailUsingGET1 (string uuid, string codiceTipoMail = null)
        {
             ApiResponse<List<MailTipo>> localVarResponse = EstraiTipoMailUsingGET1WithHttpInfo(uuid, codiceTipoMail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// estrai mail by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>ApiResponse of List&lt;MailTipo&gt;</returns>
        public ApiResponse< List<MailTipo> > EstraiTipoMailUsingGET1WithHttpInfo (string uuid, string codiceTipoMail = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiTipoMailUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-mail-by-tipo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceTipoMail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceTipoMail", codiceTipoMail)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiTipoMailUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailTipo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailTipo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailTipo>)));
        }

        /// <summary>
        /// estrai mail by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>Task of List&lt;MailTipo&gt;</returns>
        public async System.Threading.Tasks.Task<List<MailTipo>> EstraiTipoMailUsingGET1Async (string uuid, string codiceTipoMail = null)
        {
             ApiResponse<List<MailTipo>> localVarResponse = await EstraiTipoMailUsingGET1AsyncWithHttpInfo(uuid, codiceTipoMail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// estrai mail by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoMail">codiceTipoMail (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MailTipo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MailTipo>>> EstraiTipoMailUsingGET1AsyncWithHttpInfo (string uuid, string codiceTipoMail = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiTipoMailUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-mail-by-tipo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceTipoMail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceTipoMail", codiceTipoMail)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiTipoMailUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailTipo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailTipo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailTipo>)));
        }

        /// <summary>
        /// estrai telefono by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>List&lt;TelefonoTipo&gt;</returns>
        public List<TelefonoTipo> EstraiTipoTelefonoUsingGET1 (string uuid, string codiceTipoTelefono = null)
        {
             ApiResponse<List<TelefonoTipo>> localVarResponse = EstraiTipoTelefonoUsingGET1WithHttpInfo(uuid, codiceTipoTelefono);
             return localVarResponse.Data;
        }

        /// <summary>
        /// estrai telefono by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>ApiResponse of List&lt;TelefonoTipo&gt;</returns>
        public ApiResponse< List<TelefonoTipo> > EstraiTipoTelefonoUsingGET1WithHttpInfo (string uuid, string codiceTipoTelefono = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiTipoTelefonoUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-telefono-by-tipo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceTipoTelefono != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceTipoTelefono", codiceTipoTelefono)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiTipoTelefonoUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TelefonoTipo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TelefonoTipo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TelefonoTipo>)));
        }

        /// <summary>
        /// estrai telefono by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>Task of List&lt;TelefonoTipo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TelefonoTipo>> EstraiTipoTelefonoUsingGET1Async (string uuid, string codiceTipoTelefono = null)
        {
             ApiResponse<List<TelefonoTipo>> localVarResponse = await EstraiTipoTelefonoUsingGET1AsyncWithHttpInfo(uuid, codiceTipoTelefono);
             return localVarResponse.Data;

        }

        /// <summary>
        /// estrai telefono by tipo 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">uuid</param>
        /// <param name="codiceTipoTelefono">codiceTipoTelefono (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TelefonoTipo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TelefonoTipo>>> EstraiTipoTelefonoUsingGET1AsyncWithHttpInfo (string uuid, string codiceTipoTelefono = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AuPfControllerApi->EstraiTipoTelefonoUsingGET1");

            var localVarPath = "/1.0/au/personafisica/estrai-telefono-by-tipo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codiceTipoTelefono != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codiceTipoTelefono", codiceTipoTelefono)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstraiTipoTelefonoUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TelefonoTipo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TelefonoTipo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TelefonoTipo>)));
        }

        /// <summary>
        /// Ricerca Persona Fisica 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>List&lt;PersonaFisica&gt;</returns>
        public List<PersonaFisica> GetPersonaFisicaUsingPOST1 (PersonaFisicaDTO persona)
        {
             ApiResponse<List<PersonaFisica>> localVarResponse = GetPersonaFisicaUsingPOST1WithHttpInfo(persona);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ricerca Persona Fisica 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>ApiResponse of List&lt;PersonaFisica&gt;</returns>
        public ApiResponse< List<PersonaFisica> > GetPersonaFisicaUsingPOST1WithHttpInfo (PersonaFisicaDTO persona)
        {
            // verify the required parameter 'persona' is set
            if (persona == null)
                throw new ApiException(400, "Missing required parameter 'persona' when calling AuPfControllerApi->GetPersonaFisicaUsingPOST1");

            var localVarPath = "/1.0/au/personafisica/estrai-anagrafica";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (persona != null && persona.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(persona); // http body (model) parameter
            }
            else
            {
                localVarPostBody = persona; // byte array
            }

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonaFisicaUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonaFisica>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonaFisica>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonaFisica>)));
        }

        /// <summary>
        /// Ricerca Persona Fisica 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>Task of List&lt;PersonaFisica&gt;</returns>
        public async System.Threading.Tasks.Task<List<PersonaFisica>> GetPersonaFisicaUsingPOST1Async (PersonaFisicaDTO persona)
        {
             ApiResponse<List<PersonaFisica>> localVarResponse = await GetPersonaFisicaUsingPOST1AsyncWithHttpInfo(persona);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ricerca Persona Fisica 
        /// </summary>
        /// <exception cref="IO.Swagger.Au.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="persona">persona</param>
        /// <returns>Task of ApiResponse (List&lt;PersonaFisica&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PersonaFisica>>> GetPersonaFisicaUsingPOST1AsyncWithHttpInfo (PersonaFisicaDTO persona)
        {
            // verify the required parameter 'persona' is set
            if (persona == null)
                throw new ApiException(400, "Missing required parameter 'persona' when calling AuPfControllerApi->GetPersonaFisicaUsingPOST1");

            var localVarPath = "/1.0/au/personafisica/estrai-anagrafica";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (persona != null && persona.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(persona); // http body (model) parameter
            }
            else
            {
                localVarPostBody = persona; // byte array
            }

            // authentication (INAIL_API_GATEWAY_JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonaFisicaUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonaFisica>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonaFisica>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonaFisica>)));
        }

    }
}
