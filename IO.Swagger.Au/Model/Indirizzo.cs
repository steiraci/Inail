/* 
 * @project.name@
 *
 * @project.description@
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Au.Client.SwaggerDateConverter;

namespace IO.Swagger.Au.Model
{
    /// <summary>
    /// Indirizzo
    /// </summary>
    [DataContract]
    public partial class Indirizzo :  IEquatable<Indirizzo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Indirizzo" /> class.
        /// </summary>
        /// <param name="cap">cap.</param>
        /// <param name="codiceAsl">codiceAsl.</param>
        /// <param name="codiceBelfiore">codiceBelfiore.</param>
        /// <param name="codiceIndirizzo">codiceIndirizzo.</param>
        /// <param name="codiceIstat">codiceIstat.</param>
        /// <param name="descrizioneIndirizzo">descrizioneIndirizzo.</param>
        /// <param name="dug">dug.</param>
        /// <param name="indirizzoBreve">indirizzoBreve.</param>
        /// <param name="numeroCivico">numeroCivico.</param>
        /// <param name="siglaProvincia">siglaProvincia.</param>
        /// <param name="via">via.</param>
        public Indirizzo(string cap = default(string), string codiceAsl = default(string), string codiceBelfiore = default(string), int? codiceIndirizzo = default(int?), string codiceIstat = default(string), string descrizioneIndirizzo = default(string), string dug = default(string), string indirizzoBreve = default(string), string numeroCivico = default(string), string siglaProvincia = default(string), string via = default(string))
        {
            this.Cap = cap;
            this.CodiceAsl = codiceAsl;
            this.CodiceBelfiore = codiceBelfiore;
            this.CodiceIndirizzo = codiceIndirizzo;
            this.CodiceIstat = codiceIstat;
            this.DescrizioneIndirizzo = descrizioneIndirizzo;
            this.Dug = dug;
            this.IndirizzoBreve = indirizzoBreve;
            this.NumeroCivico = numeroCivico;
            this.SiglaProvincia = siglaProvincia;
            this.Via = via;
        }
        
        /// <summary>
        /// Gets or Sets Cap
        /// </summary>
        [DataMember(Name="cap", EmitDefaultValue=false)]
        public string Cap { get; set; }

        /// <summary>
        /// Gets or Sets CodiceAsl
        /// </summary>
        [DataMember(Name="codiceAsl", EmitDefaultValue=false)]
        public string CodiceAsl { get; set; }

        /// <summary>
        /// Gets or Sets CodiceBelfiore
        /// </summary>
        [DataMember(Name="codiceBelfiore", EmitDefaultValue=false)]
        public string CodiceBelfiore { get; set; }

        /// <summary>
        /// Gets or Sets CodiceIndirizzo
        /// </summary>
        [DataMember(Name="codiceIndirizzo", EmitDefaultValue=false)]
        public int? CodiceIndirizzo { get; set; }

        /// <summary>
        /// Gets or Sets CodiceIstat
        /// </summary>
        [DataMember(Name="codiceIstat", EmitDefaultValue=false)]
        public string CodiceIstat { get; set; }

        /// <summary>
        /// Gets or Sets DescrizioneIndirizzo
        /// </summary>
        [DataMember(Name="descrizioneIndirizzo", EmitDefaultValue=false)]
        public string DescrizioneIndirizzo { get; set; }

        /// <summary>
        /// Gets or Sets Dug
        /// </summary>
        [DataMember(Name="dug", EmitDefaultValue=false)]
        public string Dug { get; set; }

        /// <summary>
        /// Gets or Sets IndirizzoBreve
        /// </summary>
        [DataMember(Name="indirizzoBreve", EmitDefaultValue=false)]
        public string IndirizzoBreve { get; set; }

        /// <summary>
        /// Gets or Sets NumeroCivico
        /// </summary>
        [DataMember(Name="numeroCivico", EmitDefaultValue=false)]
        public string NumeroCivico { get; set; }

        /// <summary>
        /// Gets or Sets SiglaProvincia
        /// </summary>
        [DataMember(Name="siglaProvincia", EmitDefaultValue=false)]
        public string SiglaProvincia { get; set; }

        /// <summary>
        /// Gets or Sets Via
        /// </summary>
        [DataMember(Name="via", EmitDefaultValue=false)]
        public string Via { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Indirizzo {\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  CodiceAsl: ").Append(CodiceAsl).Append("\n");
            sb.Append("  CodiceBelfiore: ").Append(CodiceBelfiore).Append("\n");
            sb.Append("  CodiceIndirizzo: ").Append(CodiceIndirizzo).Append("\n");
            sb.Append("  CodiceIstat: ").Append(CodiceIstat).Append("\n");
            sb.Append("  DescrizioneIndirizzo: ").Append(DescrizioneIndirizzo).Append("\n");
            sb.Append("  Dug: ").Append(Dug).Append("\n");
            sb.Append("  IndirizzoBreve: ").Append(IndirizzoBreve).Append("\n");
            sb.Append("  NumeroCivico: ").Append(NumeroCivico).Append("\n");
            sb.Append("  SiglaProvincia: ").Append(SiglaProvincia).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Indirizzo);
        }

        /// <summary>
        /// Returns true if Indirizzo instances are equal
        /// </summary>
        /// <param name="input">Instance of Indirizzo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Indirizzo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cap == input.Cap ||
                    (this.Cap != null &&
                    this.Cap.Equals(input.Cap))
                ) && 
                (
                    this.CodiceAsl == input.CodiceAsl ||
                    (this.CodiceAsl != null &&
                    this.CodiceAsl.Equals(input.CodiceAsl))
                ) && 
                (
                    this.CodiceBelfiore == input.CodiceBelfiore ||
                    (this.CodiceBelfiore != null &&
                    this.CodiceBelfiore.Equals(input.CodiceBelfiore))
                ) && 
                (
                    this.CodiceIndirizzo == input.CodiceIndirizzo ||
                    (this.CodiceIndirizzo != null &&
                    this.CodiceIndirizzo.Equals(input.CodiceIndirizzo))
                ) && 
                (
                    this.CodiceIstat == input.CodiceIstat ||
                    (this.CodiceIstat != null &&
                    this.CodiceIstat.Equals(input.CodiceIstat))
                ) && 
                (
                    this.DescrizioneIndirizzo == input.DescrizioneIndirizzo ||
                    (this.DescrizioneIndirizzo != null &&
                    this.DescrizioneIndirizzo.Equals(input.DescrizioneIndirizzo))
                ) && 
                (
                    this.Dug == input.Dug ||
                    (this.Dug != null &&
                    this.Dug.Equals(input.Dug))
                ) && 
                (
                    this.IndirizzoBreve == input.IndirizzoBreve ||
                    (this.IndirizzoBreve != null &&
                    this.IndirizzoBreve.Equals(input.IndirizzoBreve))
                ) && 
                (
                    this.NumeroCivico == input.NumeroCivico ||
                    (this.NumeroCivico != null &&
                    this.NumeroCivico.Equals(input.NumeroCivico))
                ) && 
                (
                    this.SiglaProvincia == input.SiglaProvincia ||
                    (this.SiglaProvincia != null &&
                    this.SiglaProvincia.Equals(input.SiglaProvincia))
                ) && 
                (
                    this.Via == input.Via ||
                    (this.Via != null &&
                    this.Via.Equals(input.Via))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cap != null)
                    hashCode = hashCode * 59 + this.Cap.GetHashCode();
                if (this.CodiceAsl != null)
                    hashCode = hashCode * 59 + this.CodiceAsl.GetHashCode();
                if (this.CodiceBelfiore != null)
                    hashCode = hashCode * 59 + this.CodiceBelfiore.GetHashCode();
                if (this.CodiceIndirizzo != null)
                    hashCode = hashCode * 59 + this.CodiceIndirizzo.GetHashCode();
                if (this.CodiceIstat != null)
                    hashCode = hashCode * 59 + this.CodiceIstat.GetHashCode();
                if (this.DescrizioneIndirizzo != null)
                    hashCode = hashCode * 59 + this.DescrizioneIndirizzo.GetHashCode();
                if (this.Dug != null)
                    hashCode = hashCode * 59 + this.Dug.GetHashCode();
                if (this.IndirizzoBreve != null)
                    hashCode = hashCode * 59 + this.IndirizzoBreve.GetHashCode();
                if (this.NumeroCivico != null)
                    hashCode = hashCode * 59 + this.NumeroCivico.GetHashCode();
                if (this.SiglaProvincia != null)
                    hashCode = hashCode * 59 + this.SiglaProvincia.GetHashCode();
                if (this.Via != null)
                    hashCode = hashCode * 59 + this.Via.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
