/* 
 * @project.name@
 *
 * @project.description@
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Au.Client.SwaggerDateConverter;

namespace IO.Swagger.Au.Model
{
    /// <summary>
    /// StatoCivile
    /// </summary>
    [DataContract]
    public partial class StatoCivile :  IEquatable<StatoCivile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatoCivile" /> class.
        /// </summary>
        /// <param name="codice">codice.</param>
        /// <param name="decorrenza">decorrenza.</param>
        /// <param name="descrizione">descrizione.</param>
        public StatoCivile(string codice = default(string), string decorrenza = default(string), string descrizione = default(string))
        {
            this.Codice = codice;
            this.Decorrenza = decorrenza;
            this.Descrizione = descrizione;
        }
        
        /// <summary>
        /// Gets or Sets Codice
        /// </summary>
        [DataMember(Name="codice", EmitDefaultValue=false)]
        public string Codice { get; set; }

        /// <summary>
        /// Gets or Sets Decorrenza
        /// </summary>
        [DataMember(Name="decorrenza", EmitDefaultValue=false)]
        public string Decorrenza { get; set; }

        /// <summary>
        /// Gets or Sets Descrizione
        /// </summary>
        [DataMember(Name="descrizione", EmitDefaultValue=false)]
        public string Descrizione { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatoCivile {\n");
            sb.Append("  Codice: ").Append(Codice).Append("\n");
            sb.Append("  Decorrenza: ").Append(Decorrenza).Append("\n");
            sb.Append("  Descrizione: ").Append(Descrizione).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatoCivile);
        }

        /// <summary>
        /// Returns true if StatoCivile instances are equal
        /// </summary>
        /// <param name="input">Instance of StatoCivile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatoCivile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codice == input.Codice ||
                    (this.Codice != null &&
                    this.Codice.Equals(input.Codice))
                ) && 
                (
                    this.Decorrenza == input.Decorrenza ||
                    (this.Decorrenza != null &&
                    this.Decorrenza.Equals(input.Decorrenza))
                ) && 
                (
                    this.Descrizione == input.Descrizione ||
                    (this.Descrizione != null &&
                    this.Descrizione.Equals(input.Descrizione))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codice != null)
                    hashCode = hashCode * 59 + this.Codice.GetHashCode();
                if (this.Decorrenza != null)
                    hashCode = hashCode * 59 + this.Decorrenza.GetHashCode();
                if (this.Descrizione != null)
                    hashCode = hashCode * 59 + this.Descrizione.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
